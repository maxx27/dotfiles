
# to see options value run the following commands in shell:
# tmux show-options -g # for global options
# tmux show-options -w # for window options
# tmux show-options -s # for server options

# ---------------------------------------------------------------
# Basic config
# ---------------------------------------------------------------

# lower escape timing for quicker response to scroll-buffer access
set -gs escape-time 0

# Make the repeat time a bit longer; this works best when the repeating command
# involves CTRL so that releasing CTRL ends the repetition
#set -g repeat-time 1000

# Keep transient things around longer
set -g display-time 1000
#set -g display-panes-time 4000

# Allow tmux to process hex codes sent by iTerm
#set -g assume-paste-time 0

# Get Ctrl-arrows back
#setw -g xterm-keys on

# enable mouse support for switching/resizing panes/windows
setw -g mouse on

# increase scrollback lines
set -g history-limit 20000

# renumber windows sequentially after closing any of them
set -g renumber-windows on
setw -g automatic-rename off

#set -g set-titles on
#set -g set-titles-string "#T - #W"
# https://unix.stackexchange.com/questions/75216/tmux-set-titles-doesnt-work
#set -g terminal-overrides "xterm*:XT:smcup@:rmcup@"

# Enable focus events for supporting terminals
#set -g focus-events on

# Don't let apps change the window name
#set -g allow-rename off

# make window/pane index start with 1
set -g base-index 1
setw -g pane-base-index 1

# activity Monitoring
#setw -g monitor-activity off
#set -g visual-activity off

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
#setw -g aggressive-resize on

# ---------------------------------------------------------------
# Colors/Apperance
# ---------------------------------------------------------------

#source ~/.tmux/colors-light.conf

# More colors from Solarized
# $base03:    #002b36;
# $base02:    #073642;
# $base01:    #586e75;
# $base00:    #657b83;
# $base0:     #839496;
# $base1:     #93a1a1;
# $base2:     #eee8d5;
# $base3:     #fdf6e3;
# $yellow:    #b58900;
# $orange:    #cb4b16;
# $red:       #dc322f;
# $magenta:   #d33682;
# $violet:    #6c71c4;
# $blue:      #268bd2;
# $cyan:      #2aa198;
# $green:     #859900;

# ---------------------------------------------------------------
# Status Bar
# ---------------------------------------------------------------

set -g status on

# Update the status bar every few seconds
set -g status-interval 5

# <host> .... <windows> .... <info>
#set -g status-left "#[fg=green][#S] #[fg=yellow]#I #[fg=cyan]#P"
#set -g status-left ' #h '
#set -g status-left "Session: #S"
#set -g status-left-length 30
#set -g status-right '#{battery_icon} #{battery_percentage} | #{continuum_status} | %m/%d | %H:%M '
#set -g status-right "Battery: #{battery_icon} #{battery_percentage} #{battery_remain} | #(date '+%a, %b %d - %I:%M')"
#set -g status-right '%m/%d | %H:%M '
#set -g status-right ""
#set -g status-justify centre

# remove administrative debris (session name, hostname, time) in status bar
#set -g status-left ''
#set -g status-right ''

#set -g window-status-format ' #{?window_zoomed_flag,*  ,}#I:#W '
#set -g window-status-current-format ' #{?window_zoomed_flag,*  ,}#I:#W '


# statusbar colors
#set -g status-style 'bg=colour14,fg=colour15' # base1 and base3
#set -g window-status-style 'bg=default,fg=colour7'
#set -g window-status-current-style 'bg=colour10'

# window styles
#set -g window-style 'bg=colour7,fg=colour14'
#set -g window-active-style 'bg=colour15,fg=colour11'
#set -g pane-border-style 'bg=colour7,fg=colour14'
#set -g pane-active-border-style 'bg=colour7,fg=colour11'

# message text
#set -g message-bg colour7 #base2
#set -g message-fg colour9 #orange

# soften status bar colors
#set -g status-bg '#586e75'
#set -g status-fg '#eee8d5'

# pane number display
#set -g display-panes-active-colour colour4 #blue
#set -g display-panes-colour colour9 #orange

# clock
#set -g clock-mode-colour colour2 #green

# ---------------------------------------------------------------
# Key bindings
# ---------------------------------------------------------------

# unbind default prefix and set it to Ctrl+a
#unbind C-b
#set -g prefix C-a
#bind C-a send-prefix
# Change the prefix to C-s
#set -g prefix C-s

# for nested tmux sessions
#bind a send-prefix

# reload config file
bind r source-file ~/.tmux.conf \; display "Config Reloaded!"
# Reload the config
#bind R run -b ' \
#  tmux source-file ~/.tmux.conf > /dev/null; \
#  tmux display-message "Sourced .tmux.conf!"'

# switch to last pane
#bind C-a last-pane

# Quickly open a new window
#bind N new-window
#bind c new-window -c '#{pane_current_path}'
# Create new windows (like Cmd-T to create new tabs)
#bind -n C-t new-window -a -c "#{pane_current_path}"

#bind k confirm kill-window
#bind K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# tile all windows
#unbind =
#bind = select-layout tiled

# Window movement
#bind -r "<" swap-window -t -1
#bind -r ">" swap-window -t +1

# Respawn a pane (helpful when executables have moved, as during update_all)
#bind r respawn-pane -k

# Ask before killing a window
#unbind C-d
#bind -n C-d confirm-before -p "kill-pane #P? (y/n)" kill-pane

# split window
#unbind %
#unbind '"'
#bind h split-window -h -c '#{pane_current_path}'
#bind v split-window -v -c '#{pane_current_path}'
#bind | split-window -h -c "#{pane_current_path}"
#bind - split-window -v -c "#{pane_current_path}"

# synchronize all panes in a window
#bind y setw synchronize-panes

# ---------------------------------------------------------------
# Vi-style
# ---------------------------------------------------------------

# set vi mode for status line (when enter commands interactively)
#set -g status-keys vi

# set vi mode for copy mode
setw -g mode-keys vi

# Unbind all the arrow keys since we're using vi bindings
#unbind Left
#unbind Down
#unbind Up
#unbind Right

# Resize pane shortcuts
#bind -r H resize-pane -L 10
#bind -r J resize-pane -D 10
#bind -r K resize-pane -U 10
#bind -r L resize-pane -R 10
# Shift + arrows to resize pane
#bind -n S-Left resize-pane -L 2
#bind -n S-Down resize-pane -D 1
#bind -n S-Up resize-pane -U 1
#bind -n S-Right resize-pane -R 2
#
#bind -r H resize-pane -L 5
#bind -r J resize-pane -D 5
#bind -r K resize-pane -U 5
#bind -r L resize-pane -R 5

#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# Moving between windows
#bind -r C-j select-window -t :+ # next
#bind -r C-k select-window -t :- # previos
#bind -r [ previous-window
#bind -r ] next-window
#bind -n S-left previous-window
#bind -n S-right next-window

# smart pane switching with awareness of vim splits
#is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
#bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
#bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
#bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
#bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
#bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

#bind -T edit-mode-vi Up send-keys -X history-up
#bind -T edit-mode-vi Down send-keys -X history-down
#unbind -T copy-mode-vi Space     ;   bind -T copy-mode-vi v send-keys -X begin-selection
#unbind -T copy-mode-vi Enter     ;   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#unbind -T copy-mode-vi C-v       ;   bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
#unbind -T copy-mode-vi [         ;   bind -T copy-mode-vi [ send-keys -X begin-selection
#unbind -T copy-mode-vi ]         ;   bind -T copy-mode-vi ] send-keys -X copy-selection
#
#unbind [
#bind Escape copy-mode
#unbind p
#bind p paste-buffer
# Copy and paste
#bind p run "reattach-to-user-namespace pbpaste | tmux load-buffer -; tmux paste-buffer"
#bind c copy-mode
#bind -T copy-mode-vi 'v' send -X begin-selection
#bind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "tmux save-buffer - | reattach-to-user-namespace pbcopy"
# Buffers to/from Mac clipboard, yay tmux book from pragprog
#bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
#bind C-v run "tmux set-buffer $(reattach-to-user-namespace pbpaste); tmux paste-buffer"


# Allow mouse copy pasting behavior (Compat with Tmux 2.4+)
#bind -T copy-mode-vi WheelUpPane send-keys -X scroll-up
#bind -T copy-mode-vi WheelDownPane send-keys -X scroll-down
#unbind -T copy-mode-vi MouseDragEnd1Pane
# Mouse wheel scrolls back
#bind -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "select-pane -t =; send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
#bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "select-pane -t =; send-keys -M" "select-pane -t =; send-keys -M"
#bind -T copy-mode-vi WheelUpPane send -X halfpage-up
#bind -T copy-mode-vi WheelDownPane send -X halfpage-down
# Page up scrolls back
#bind -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
#bind -T copy-mode-vi PPage send -X page-up
#bind -T copy-mode-vi NPage send -X page-down


# ---------------------------------------------------------------
# Plugins
# ---------------------------------------------------------------

#set-environment -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"
#set -g @plugin 'tmux-plugins/tpm' # Tmux package manager

# How to install other plugins from Github:
# To install new plugins press: prefix + I
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

#set -g @plugin 'tmux-plugins/tmux-sensible'
#set -g @plugin "tmux-plugins/tmux-copycat"
#set -g @plugin "tmux-plugins/tmux-pain-control"
# Unbind some defaults which tmux-pain-control redefines
#unbind C-Left
#unbind C-Right
#unbind C-Up
#unbind C-Down
#set -g @plugin "tmux-plugins/tmux-yank"
#set -g @plugin 'tmux-plugins/tmux-open' # Open highlighted selection directly from Tmux
#set -g @plugin 'christoomey/vim-tmux-navigator'

#set -g @plugin 'tmux-plugins/tmux-resurrect' # Restore previous sessions on reboot
#set -g @resurrect-dir "$CACHEDIR/tmux/resurrect"
#set -g @resurrect-save 'S'
#set -g @resurrect-restore 'R'
#set -g @resurrect-capture-pane-contents 'on'
#set -g @resurrect-strategy-vim 'session'

#set -g @plugin 'tmux-plugins/tmux-continuum' # Restore previous sessions on system boot
#set -g @continuum-save-interval '15'
#set -g @continuum-boot 'on'
#set -g @continuum-boot-options 'iterm'
#set -g @continuum-restore 'on'
#set -g @continuum-save-interval '5'

#set -g @plugin 'tmux-plugins/tmux-battery' #Show battery icon/status
#set -g @batt_discharging_icon '-'
#set -g @batt_full_charge_icon '-'
#set -g @batt_high_charge_icon '-'
#set -g @batt_medium_charge_icon '-'
#set -g @batt_low_charge_icon '-'
#set -g @batt_charged_icon ' '
#set -g @batt_charging_icon '+'

# Initializes Tmux plugin manager (keep this line at the very bottom of tmux.conf)
#run '~/.tmux/plugins/tpm/tpm'
